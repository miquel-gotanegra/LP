# Generated from logo3d.g by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\"")
        buf.write("\u00d2\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u009f\n\35\f\35\16\35\u00a2\13\35\3\35")
        buf.write("\3\35\3\36\6\36\u00a7\n\36\r\36\16\36\u00a8\3\36\6\36")
        buf.write("\u00ac\n\36\r\36\16\36\u00ad\3\36\6\36\u00b1\n\36\r\36")
        buf.write("\16\36\u00b2\3\36\7\36\u00b6\n\36\f\36\16\36\u00b9\13")
        buf.write("\36\3\37\6\37\u00bc\n\37\r\37\16\37\u00bd\3 \6 \u00c1")
        buf.write("\n \r \16 \u00c2\3 \3 \7 \u00c7\n \f \16 \u00ca\13 \3")
        buf.write("!\6!\u00cd\n!\r!\16!\u00ce\3!\3!\2\2\"\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"\3\2\6\4\2\f\f\17\17\4\2C\\c|")
        buf.write("\3\2\62;\4\2\f\f\"\"\2\u00dc\2\3\3\2\2\2\2\5\3\2\2\2\2")
        buf.write("\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3")
        buf.write("\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2")
        buf.write("\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2")
        buf.write("\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2")
        buf.write("\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\3C\3\2\2\2\5I\3\2")
        buf.write("\2\2\7K\3\2\2\2\tM\3\2\2\2\13O\3\2\2\2\rS\3\2\2\2\17W")
        buf.write("\3\2\2\2\21Z\3\2\2\2\23]\3\2\2\2\25`\3\2\2\2\27c\3\2\2")
        buf.write("\2\31h\3\2\2\2\33m\3\2\2\2\35s\3\2\2\2\37v\3\2\2\2!z\3")
        buf.write("\2\2\2#\177\3\2\2\2%\u0082\3\2\2\2\'\u0084\3\2\2\2)\u0086")
        buf.write("\3\2\2\2+\u0088\3\2\2\2-\u008a\3\2\2\2/\u008d\3\2\2\2")
        buf.write("\61\u0090\3\2\2\2\63\u0092\3\2\2\2\65\u0094\3\2\2\2\67")
        buf.write("\u0097\3\2\2\29\u009a\3\2\2\2;\u00a6\3\2\2\2=\u00bb\3")
        buf.write("\2\2\2?\u00c0\3\2\2\2A\u00cc\3\2\2\2CD\7R\2\2DE\7T\2\2")
        buf.write("EF\7Q\2\2FG\7E\2\2GH\7\"\2\2H\4\3\2\2\2IJ\7*\2\2J\6\3")
        buf.write("\2\2\2KL\7.\2\2L\b\3\2\2\2MN\7+\2\2N\n\3\2\2\2OP\7\"\2")
        buf.write("\2PQ\7K\2\2QR\7U\2\2R\f\3\2\2\2ST\7G\2\2TU\7P\2\2UV\7")
        buf.write("F\2\2V\16\3\2\2\2WX\7<\2\2XY\7?\2\2Y\20\3\2\2\2Z[\7@\2")
        buf.write("\2[\\\7@\2\2\\\22\3\2\2\2]^\7>\2\2^_\7>\2\2_\24\3\2\2")
        buf.write("\2`a\7K\2\2ab\7H\2\2b\26\3\2\2\2cd\7V\2\2de\7J\2\2ef\7")
        buf.write("G\2\2fg\7P\2\2g\30\3\2\2\2hi\7G\2\2ij\7N\2\2jk\7U\2\2")
        buf.write("kl\7G\2\2l\32\3\2\2\2mn\7Y\2\2no\7J\2\2op\7K\2\2pq\7N")
        buf.write("\2\2qr\7G\2\2r\34\3\2\2\2st\7F\2\2tu\7Q\2\2u\36\3\2\2")
        buf.write("\2vw\7H\2\2wx\7Q\2\2xy\7T\2\2y \3\2\2\2z{\7H\2\2{|\7T")
        buf.write("\2\2|}\7Q\2\2}~\7O\2\2~\"\3\2\2\2\177\u0080\7V\2\2\u0080")
        buf.write("\u0081\7Q\2\2\u0081$\3\2\2\2\u0082\u0083\7,\2\2\u0083")
        buf.write("&\3\2\2\2\u0084\u0085\7\61\2\2\u0085(\3\2\2\2\u0086\u0087")
        buf.write("\7-\2\2\u0087*\3\2\2\2\u0088\u0089\7/\2\2\u0089,\3\2\2")
        buf.write("\2\u008a\u008b\7?\2\2\u008b\u008c\7?\2\2\u008c.\3\2\2")
        buf.write("\2\u008d\u008e\7#\2\2\u008e\u008f\7?\2\2\u008f\60\3\2")
        buf.write("\2\2\u0090\u0091\7>\2\2\u0091\62\3\2\2\2\u0092\u0093\7")
        buf.write("@\2\2\u0093\64\3\2\2\2\u0094\u0095\7>\2\2\u0095\u0096")
        buf.write("\7?\2\2\u0096\66\3\2\2\2\u0097\u0098\7@\2\2\u0098\u0099")
        buf.write("\7?\2\2\u00998\3\2\2\2\u009a\u009b\7\61\2\2\u009b\u009c")
        buf.write("\7\61\2\2\u009c\u00a0\3\2\2\2\u009d\u009f\n\2\2\2\u009e")
        buf.write("\u009d\3\2\2\2\u009f\u00a2\3\2\2\2\u00a0\u009e\3\2\2\2")
        buf.write("\u00a0\u00a1\3\2\2\2\u00a1\u00a3\3\2\2\2\u00a2\u00a0\3")
        buf.write("\2\2\2\u00a3\u00a4\b\35\2\2\u00a4:\3\2\2\2\u00a5\u00a7")
        buf.write("\t\3\2\2\u00a6\u00a5\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8")
        buf.write("\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00b7\3\2\2\2")
        buf.write("\u00aa\u00ac\t\4\2\2\u00ab\u00aa\3\2\2\2\u00ac\u00ad\3")
        buf.write("\2\2\2\u00ad\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00b6")
        buf.write("\3\2\2\2\u00af\u00b1\t\3\2\2\u00b0\u00af\3\2\2\2\u00b1")
        buf.write("\u00b2\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2")
        buf.write("\u00b3\u00b6\3\2\2\2\u00b4\u00b6\7a\2\2\u00b5\u00ab\3")
        buf.write("\2\2\2\u00b5\u00b0\3\2\2\2\u00b5\u00b4\3\2\2\2\u00b6\u00b9")
        buf.write("\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8")
        buf.write("<\3\2\2\2\u00b9\u00b7\3\2\2\2\u00ba\u00bc\t\4\2\2\u00bb")
        buf.write("\u00ba\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00bb\3\2\2\2")
        buf.write("\u00bd\u00be\3\2\2\2\u00be>\3\2\2\2\u00bf\u00c1\t\4\2")
        buf.write("\2\u00c0\u00bf\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\u00c0")
        buf.write("\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4")
        buf.write("\u00c8\7\60\2\2\u00c5\u00c7\t\4\2\2\u00c6\u00c5\3\2\2")
        buf.write("\2\u00c7\u00ca\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c8\u00c9")
        buf.write("\3\2\2\2\u00c9@\3\2\2\2\u00ca\u00c8\3\2\2\2\u00cb\u00cd")
        buf.write("\t\5\2\2\u00cc\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write("\u00cc\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d0\3\2\2\2")
        buf.write("\u00d0\u00d1\b!\2\2\u00d1B\3\2\2\2\r\2\u00a0\u00a8\u00ad")
        buf.write("\u00b2\u00b5\u00b7\u00bd\u00c2\u00c8\u00ce\3\b\2\2")
        return buf.getvalue()


class logo3dLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    COMMENT = 28
    WORD = 29
    INT = 30
    FLOAT = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'PROC '", "'('", "','", "')'", "' IS'", "'END'", "':='", "'>>'", 
            "'<<'", "'IF'", "'THEN'", "'ELSE'", "'WHILE'", "'DO'", "'FOR'", 
            "'FROM'", "'TO'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "WORD", "INT", "FLOAT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "COMMENT", "WORD", "INT", "FLOAT", "WS" ]

    grammarFileName = "logo3d.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


